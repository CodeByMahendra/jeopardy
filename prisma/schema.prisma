

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String     @id @default(uuid())
  email            String     @unique
  password         String?
  role             Role       @default(USER)
  score            Int        @default(0)
  name             String     @default("Unknown")
  membership       Membership @default(NONE)
  emailVerified    DateTime?
  image            String?
  resetToken       String?
  resetTokenExpiry DateTime?
  accounts         Account[]
  attempts         Attempt[]
  sessions         Session[]
  orders           Order[]
  cart             Cart[] 
}


model Order {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  total     Int
  status    String   @default("Pending")
  createdAt DateTime @default(now())
}

model Product {
  id            String        @id @default(uuid())
  name          String
  image         String
  description   String?
  categoryId    String
  category      Storecategory @relation(fields: [categoryId], references: [id])
  basePrice     Float
  priceOneMonth Float
  priceOneYear  Float
  priceLifetime Float
  createdAt     DateTime      @default(now())
  orders        Order[] 
    cartItems             CartItem[]
}

model Storecategory {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

enum Membership {
  NONE
  ONE_MONTH
  ONE_YEAR
  LIFETIME
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String  @unique
  access_token      String?
  expires_at        Int?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Question {
  id       String    @id @default(uuid())
  options  String[]
  answer   String
  points   Int
  question String
  attempts Attempt[]
}

model Attempt {
  id         String   @id @default(uuid())
  userId     String
  questionId String
  isCorrect  Boolean
  question   Question @relation(fields: [questionId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  name  String @unique
  id    Int    @id @default(autoincrement())
  blogs Blog[]
}

model Blog {
  image      String
  title      String
  content    String
  id         Int      @id @default(autoincrement())
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user      User       @relation(fields: [userId], references: [id])
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int
  price     Float

  cart     Cart     @relation(fields: [cartId], references: [id])
  product  Product  @relation(fields: [productId], references: [id]) 
}


enum Role {
  USER
  ADMIN
}
