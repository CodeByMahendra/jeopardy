// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// model User {
//   id       String    @id @default(uuid())
//   email    String    @unique
//   password String
//   role     Role      @default(USER)
//   score    Int       @default(0)
//   name     String    @default("Unknown")
//   attempts Attempt[]
// }

// model Question {
//   id       String    @id @default(uuid())
//   options  String[]
//   answer   String
//   points   Int
//   question String
//   attempts Attempt[]
// }

// model Attempt {
//   id         String   @id @default(uuid())
//   userId     String
//   questionId String
//   isCorrect  Boolean
//   question   Question @relation(fields: [questionId], references: [id])
//   user       User     @relation(fields: [userId], references: [id])
// }

// enum Role {
//   USER
//   ADMIN
// }


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String?   // ✅ Made optional for Google Auth users
  name          String    @default("Unknown")
  role          Role      @default(USER)
  score         Int       @default(0)
  image         String?   // ✅ Stores Google profile picture
  emailVerified DateTime? // ✅ Needed for email verification
  accounts      Account[]
  sessions      Session[]
  attempts      Attempt[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String  @unique
  access_token      String?
  expires_at        Int?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String  @id @default(uuid())
  userId       String
  sessionToken String  @unique
  expires      DateTime
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Question {
  id       String    @id @default(uuid())
  options  String[]
  answer   String
  points   Int
  question String
  attempts Attempt[]
}

model Attempt {
  id         String   @id @default(uuid())
  userId     String
  questionId String
  isCorrect  Boolean
  question   Question @relation(fields: [questionId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  ADMIN
}
